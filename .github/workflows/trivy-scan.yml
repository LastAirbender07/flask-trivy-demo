name: Trivy Scan and Handle Issues

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Build and Push Docker Image"]
    types:
      - completed

permissions:
  contents: read
  issues: write  # Required for creating/updating issues

jobs:
  scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Image Name
        id: vars
        run: |
          IMAGE_NAME=ghcr.io/${{ github.repository_owner }}/flask-trivy-demo:${{ github.sha }}
          IMAGE_NAME_LC=$(echo "$IMAGE_NAME" | tr '[:upper:]' '[:lower:]')
          echo "image_name_lc=$IMAGE_NAME_LC" >> $GITHUB_OUTPUT

      - name: Pull Docker Image
        run: docker pull "${{ steps.vars.outputs.image_name_lc }}"

      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy

      - name: Trivy Scan and Save Report
        run: |
          trivy image \
            --ignore-unfixed \
            --vuln-type os,library \
            --severity CRITICAL,HIGH \
            --format table \
            "${{ steps.vars.outputs.image_name_lc }}" > trivy-report.txt

      - name: Upload Trivy Report Artifact
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.txt

  handle-issues:
    runs-on: ubuntu-latest
    needs: scan

    steps:
      - name: Download Trivy Report Artifact
        uses: actions/download-artifact@v4
        with:
          name: trivy-report
          path: ./artifacts

      - name: Check for Critical/High Vulnerabilities
        id: check_vuln
        run: |
          if grep -qE "CRITICAL|HIGH" ./artifacts/trivy-report.txt; then
            echo "vuln_found=true" >> $GITHUB_OUTPUT
          else
            echo "vuln_found=false" >> $GITHUB_OUTPUT
          fi

      - name: Prepare Markdown Issue
        if: steps.check_vuln.outputs.vuln_found == 'true'
        run: |
          echo "## 🔐 Trivy Security Scan Report" > issue.md
          echo "**Branch**: \`${{ github.ref_name }}\`" >> issue.md
          echo "**Commit**: \`${{ github.sha }}\`" >> issue.md
          echo "" >> issue.md
          echo "**Vulnerability Report:**" >> issue.md
          echo '```' >> issue.md
          cat ./artifacts/trivy-report.txt >> issue.md
          echo '```' >> issue.md

      - name: Close Old Trivy Issues
        if: steps.check_vuln.outputs.vuln_found == 'true'
        run: |
          OLD_ISSUE_NUMS=$(gh issue list --state open --search "Trivy Security Scan Report" --json number,title | jq -r '.[] | select(.title | test("Trivy Security Scan Report")) | .number')
          for ISSUE_NUM in $OLD_ISSUE_NUMS; do
            gh issue close "$ISSUE_NUM" --reason completed
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create New GitHub Issue
        if: steps.check_vuln.outputs.vuln_found == 'true'
        uses: peter-evans/create-issue-from-file@v5
        with:
          title: "Trivy Security Scan Report - ${{ github.ref_name }} - ${{ github.sha }}"
          content-filepath: issue.md
          labels: |
            security
            automated issue
